@startuml
'https://plantuml.com/class-diagram

'######################
'######################  start config
skinparam linetype ortho
'hide circle

skinparam minClassWidth 200
skinparam nodesep 80
skinparam ranksep 20
skinparam padding 3

skinparam package  {
    BackgroundColor white
    BorderColor grey
    shadowing false
    FontStyle normal
    FontSize 16
    borderThickness 0.5
    fontColor #000
}

skinparam legend {
    backgroundColor white
    borderColor white
    shadowing false
    FontStyle normal
    FontSize 12
    borderThickness 0.5
    fontColor black
    padding 0
    DesignedBorderColor white
}

skinparam class {
    stereotypeFontSize 10
    fontSize 20
    fontName Helvetica

    arrowColor black
    arrowThickness 1
    attributeIconSize 10

    borderColor black
    borderThickness 0.5
    backgroundColor #eee


}

skinparam entity {
    backgroundColor red
    borderColor black
    borderThickness 0.5

}

skinparam rectangle {
    shadowing false
    fontSize 15
    textAlignment left
    fontStyle italic
    stereotypeFontSize 10
    borderThickness 0.5

}

'TITLE ON TOP
title US012 - As a director I want to create a Typology

'HEADER FOOTER DESCRIPTIONS
center header ONION
center footer DDD - Domain Driven Design

'###################### end config
'######################


rectangle "Interface Adapters Layer" #C0FFC050  {

      rectangle "Controllers" #C0FFC080  {

          package "ImplementedControllers" #7acff5  {

            class CreateTypologyController {
                - CreateTypologyService createTypologyService;
                + createTypology( TypologyCreationDTO typologyCreation ) : ResponseEntity<Object>
            }
          }
          }

          package "Repositories" #7acff5  {

            class TypologyStore {
                - List<Typology> typologyList;
                + getTypologyByDescription( Description typologyDescription ) : Typology
                + doesTypologyExistByDescription(Description typologyDescription) : boolean
            }
}
}

rectangle "Application Services / Use Case Services" #FFAFAF50  {

rectangle "App Services" #FFAFAF80  {

          package "ImplementedAppServices" #7acff5  {

            class CreateTypologyService {
                - TypologyStore typologyStore;
                + createTypologyAndSave( TypologyCreationDTO typologyCreation ) : Optional<Typology>
            }
          }

      }

}

rectangle "Assemblers and DTO's" {

        package "DTO" {

            class TypologyCreationDTO {
                + String description;

            }

            class TypologyDTO {
                + Description typologyDescription;
            }
        }
}

rectangle "Entities / Core / Domain" #FFE0C050  {

    rectangle "Aggregates" #7acff580  {

        package "Typology" <<Aggregate>> #7acff5  {

            class Typology <<Root>> {
                - Description typologyDescription;
                + checkTypologyDescription(Description typologyDescription) : boolean
                + getTypologyDescription() : TypologyDescription
            }

        }


        }

        package "Factories" #7acff5 {

            Interface TypologyFactoryInterface {

            }

            class TypologyFactory {
                + createTypology(Description description) : Typology
            }

        }
    }

    package "ValueObjects" #7acff5 {


        class Description <<Value Object>> {
            - String description
            + {abstract} createDescription( String description ) : Description
        }
    }

Typology ..left.|> TypologyFactory
CreateTypologyController --down-> CreateTypologyService

CreateTypologyService --up-> TypologyStore


CreateTypologyService --down-> Typology

TypologyFactory --left-> TypologyFactoryInterface


Typology *-down-> Description


@enduml