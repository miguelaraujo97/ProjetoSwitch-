@startuml
'https://plantuml.com/sequence-diagram

autonumber
autoactivate on

Actor "Product Owner" as actor
Participant "CreateUserStoryUI" as createUserStoryUi
Participant ":CreateUserStoryController" as createUserStoryController
Participant ":DataManagement" as dataManagement
Participant "projectStore : ProjectStore" as projectStore
Participant "ProductOwnerProjects : List<Projects>" as list
Participant "project : Project" as project
Participant "productBacklog : ProductBacklog" as productBacklog
Participant "userStory : UserStory" as us


actor -> createUserStoryUi : Request List of Projects based on PO ID
createUserStoryUi -> createUserStoryController :getProjectListByRoleId(roleId)
createUserStoryController -> dataManagement : projectStore = getProjectStore()
dataManagement --> createUserStoryController : projectStore
createUserStoryController -> projectStore : getProjectListByRoleId((roleId)
projectStore -> projectStore : validateRoleId(roleId)
projectStore -> list **

group loop [For each project in projectStore]
    projectStore -> project : hasResourceWithRoleId : boolean
    alt if boolean == true
        projectStore -> list: addProjectToList(project)
    end
end

projectStore --> dataManagement : ProductOwnerProjects
dataManagement --> createUserStoryController : ProductOwnerProjects
createUserStoryController -> list : toString() : ProductOwnerProjectsString
createUserStoryController --> createUserStoryUi : ProductOwnerProjects
createUserStoryUi --> actor : Show available Projects

actor -> createUserStoryUi: Select Project
createUserStoryUi -> createUserStoryController: getProjectByRoleId(projectCode, roleId))
createUserStoryController -> projectStore: project = getProjectByRoleId(projectCode, roleId)
projectStore --> createUserStoryController : project
createUserStoryController --> createUserStoryUi : project
createUserStoryUi --> actor: Get Selected project

actor -> createUserStoryUi : Start a new User Story
createUserStoryUi --> actor : Request User Story data (description)

actor -> createUserStoryUi : Insert requested data (description)
createUserStoryUi -> createUserStoryController : createUserStory(projectCode, description)
createUserStoryController -> project : productBacklog = getProductBacklog()
project -> productBacklog: createUserStory(description)
productBacklog -> productBacklog : validateUsDescription(description)
productBacklog -> us ** : userStory = createUserStory(description)
createUserStoryController --> createUserStoryUi : Success creating User Story
createUserStoryUi --> actor : Show Data and requests confirmation

actor -> createUserStoryUi : Confirms the data
createUserStoryUi -> createUserStoryController : addUserStory(userStory, projectCode)
createUserStoryController -> productBacklog: addUserStoryToProductBacklog(userStory)
productBacklog --> createUserStoryController: Success adding User Story
createUserStoryController --> createUserStoryUi: Success adding USer Story
createUserStoryUi --> actor : User Story added with success

@enduml